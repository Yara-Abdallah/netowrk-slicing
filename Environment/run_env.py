import numpy as np
import traci
import env_variables
import xml.etree.ElementTree as ET
import random
from uuid import uuid4
from Outlet.Cellular.ThreeG import ThreeG
from Vehicle.Car import Car
from Vehicle.VehicleOutletObserver import ConcreteObserver


def prepare_route():
    """
    add routes to env_variables
    where the routes generated by randomTrips and store in random_routes_path
    """
    tree = ET.parse(env_variables.random_routes_path)
    root = tree.getroot()
    for child_root in root:
        # print(child_root.tag, child_root.attrib)
        id_ = child_root.attrib['id']
        for child in child_root:
            # print(child.tag, child.attrib)
            edges_ = list((child.attrib['edges']).split(' '))
            # print('the id: {}  , edges: {}'.format(id_, edges_))
            traci.route.add(id_, edges_)
            env_variables.all_routes.append(id_)


def generate_vehicles(number_vehicles):
    """
    It generates vehicles and adds it to the simulation
    and get random route for each vehicle from routes in env_variables.py
    :param number_vehicles: number of vehicles to be generated
    """
    for i in range(number_vehicles):
        id_route_ = random.choice(env_variables.all_routes)
        uid = str(uuid4())
        traci.vehicle.add(vehID='Veh' + uid, routeID=id_route_)


def get_polygons():
    all_polygon_ = traci.polygon.getIDList()
    return all_polygon_


def get_buildings(id_list):
    all_builds_ = []
    for id_poly in id_list:
        if traci.polygon.getType(id_poly) == 'building':
            all_builds_.append(id_poly)
    return all_builds_


def get_all_types_of_polygons(id_list):
    all_types_ = []
    for id_poly in id_list:
        all_types_.append(traci.polygon.getType(id_poly))
    return list(set(all_types_))


def get_all_outlets():
    """
    get all outlets and add id with position to env variables
    """
    poi_ids = traci.poi.getIDList()
    for id_ in poi_ids:
        type_poi = traci.poi.getType(id_)
        if type_poi in env_variables.types_outlets:
            position_ = traci.poi.getPosition(id_)
            env_variables.outlets[type_poi].append((id_, position_))


def select_outlets_to_show_in_gui():
    """
    select outlets in network to display type of each outlet
    """
    for key in env_variables.outlets.keys():
        print(key)
        print(env_variables.outlets[key])
        for id_, _ in env_variables.outlets[key]:
            traci.gui.toggleSelection(id_, 'poi')


def get_position_all_vehicles(id_vehicles):
    """
    get ids and positions of vehicles which running in simulation and add they to env variables
    :param id_vehicles: list of ids vehicles
    :return:
    """
    env_variables.vehicles_id_pos = list(map(lambda id_: (id_, traci.vehicle.getPosition(id_)), id_vehicles))


# def main():
sumoCmd = ["sumo-gui", "-c", env_variables.network_path]
traci.start(sumoCmd)

def get_positions_of_outlets():
    positions_of_outlets = []
    for key in env_variables.outlets.keys():
        positions_of_outlets.extend(list(map(lambda id_: id_[1], env_variables.outlets[key])))
    return positions_of_outlets

get_all_outlets()
outlets_pos=get_positions_of_outlets()
prepare_route()
step = 0

generate_vehicles(5)


# while traci.simulation.getMinExpectedNumber() > 0:
while step < env_variables.TIME:
    traci.simulationStep()
    get_position_all_vehicles(traci.vehicle.getIDList())
    # to make generate vehicles not growing put this condition
    id_veh = traci.vehicle.getIDList()[0]
    veh_position = traci.vehicle.getPosition(id_veh)
    if step % 200 == 0:
        generate_vehicles(150)

    if step == 0:
        generate_vehicles(150)
        select_outlets_to_show_in_gui()

    for index,i in enumerate(traci.vehicle.getIDList()):
        veh_position=traci.vehicle.getPosition(i)
        print("car ..... id ", index)
        print("in time step .... ",step)
        car1 = Car(id_veh, veh_position[0], veh_position[1])
        observer = ConcreteObserver(outlets_pos)
        car1.attach(observer)
        car1.set_state(veh_position[0], veh_position[1])
    # to check output:
    # if step == 90:
    #     car1 = Car(id_veh, veh_position[0], veh_position[1])
    #     observer = ConcreteObserver(outlets_pos)
    #     car1.attach(observer)
    #     car1.set_state(veh_position[0], veh_position[1])
    print(step)

    step += 1

traci.close()
# Example usage







# outlet1 = ThreeG(0, 1, [1, 1, 1], [2,2], 20, [10, 15, 22], [10, 20, 30])
# outlet2 = ThreeG(0, 1, [1, 1, 1], [10,5], 30, [10, 15, 22], [10, 20, 30])
# outlet3 = ThreeG(0, 1, [1, 1, 1], [4,8], 40, [10, 15, 22], [10, 20, 30])
# outlet=[]
# outlet.append(outlet1)
# outlet.append(outlet2)
# outlet.append(outlet3)
#
# #
# # car1 = Car(id_veh , veh_position[0] , veh_position[1])
# # observer = ConcreteObserver(outlets_pos)
# # car1.attach(observer)
# # car1.set_state(2, 3)  # This should trigger the observer to update
# # print("outlets can serve this service ",car1.outlets_serve)
# # car2 = Car(5, 15 , 20)
# # car2.attach(observer)
# # car2.set_state(15, 20)
# # print("outlets can serve this service ",car2.outlets_serve)
#
# print(env_variables.outlets)
